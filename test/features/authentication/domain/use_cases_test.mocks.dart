// Mocks generated by Mockito 5.4.2 from annotations
// in notez/test/features/authentication/domain/use_cases_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:notez/features/authentication/domain/entities/user.dart' as _i6;
import 'package:notez/features/authentication/domain/repository/authentication_repository.dart'
    as _i3;
import 'package:notez/shared/exceptions/auth_exception.dart' as _i5;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [AuthenticationRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthenticationRepository extends _i1.Mock
    implements _i3.AuthenticationRepository {
  MockAuthenticationRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.AuthException, _i6.User>>
      authenticateWithGoogle() => (super.noSuchMethod(
            Invocation.method(
              #authenticateWithGoogle,
              [],
            ),
            returnValue:
                _i4.Future<_i2.Either<_i5.AuthException, _i6.User>>.value(
                    _FakeEither_0<_i5.AuthException, _i6.User>(
              this,
              Invocation.method(
                #authenticateWithGoogle,
                [],
              ),
            )),
          ) as _i4.Future<_i2.Either<_i5.AuthException, _i6.User>>);

  @override
  _i4.Future<_i2.Either<_i5.AuthException, _i6.User>> authenticateWithApple() =>
      (super.noSuchMethod(
        Invocation.method(
          #authenticateWithApple,
          [],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.AuthException, _i6.User>>.value(
            _FakeEither_0<_i5.AuthException, _i6.User>(
          this,
          Invocation.method(
            #authenticateWithApple,
            [],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.AuthException, _i6.User>>);

  @override
  _i4.Future<_i2.Either<_i5.AuthException, _i6.User>>
      authenticateAnonymously() => (super.noSuchMethod(
            Invocation.method(
              #authenticateAnonymously,
              [],
            ),
            returnValue:
                _i4.Future<_i2.Either<_i5.AuthException, _i6.User>>.value(
                    _FakeEither_0<_i5.AuthException, _i6.User>(
              this,
              Invocation.method(
                #authenticateAnonymously,
                [],
              ),
            )),
          ) as _i4.Future<_i2.Either<_i5.AuthException, _i6.User>>);

  @override
  _i4.Future<_i2.Either<_i5.AuthException, void>> signOut() =>
      (super.noSuchMethod(
        Invocation.method(
          #signOut,
          [],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.AuthException, void>>.value(
            _FakeEither_0<_i5.AuthException, void>(
          this,
          Invocation.method(
            #signOut,
            [],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.AuthException, void>>);

  @override
  _i2.Either<_i5.AuthException, _i6.User?> currentUser() => (super.noSuchMethod(
        Invocation.method(
          #currentUser,
          [],
        ),
        returnValue: _FakeEither_0<_i5.AuthException, _i6.User?>(
          this,
          Invocation.method(
            #currentUser,
            [],
          ),
        ),
      ) as _i2.Either<_i5.AuthException, _i6.User?>);
}
